--- netmap_vale.c	2017-01-11 14:50:57.000000000 +0530
+++ netmap_vale_mq_1024.c	2017-06-18 21:12:43.910505236 +0530
@@ -144,6 +144,7 @@
 #define NM_BDG_HASH		1024	/* forwarding table entries */
 #define NM_BDG_BATCH		1024	/* entries in the forwarding buffer */
 #define NM_MULTISEG		64	/* max size of a chain of bufs */
+#define SEED_CHAR		'B'
 /* actual size of the tables */
 #define NM_BDG_BATCH_MAX	(NM_BDG_BATCH + NM_MULTISEG)
 /* NM_FT_NULL terminates a list of slots in the ft */
@@ -183,6 +184,31 @@
 	uint64_t	ports;
 };
 
+#define ETH_ALEN	6	/* Octets in one ethernet addr	*/
+#define ETH_P_IP	0x0800	/* Internet Protocol packet	*/
+#define ETH_P_ARP	0x0806	/* Address Resolution packet	*/
+#define ETH_P_8021Q	0x8100	/* 802.1Q VLAN Extended Header	*/
+#define ETH_P_IPV6	0x86DD	/* IPv6 over bluebook		*/
+#define ETH_P_8021AD	0x88A8	/* 802.1ad Service VLAN		*/
+#define ETH_P_QINQ1	0x9100	/* deprecated QinQ VLAN [ NOT AN OFFICIALLY REGISTERED ID ] */
+#define ETH_P_QINQ2	0x9200	/* deprecated QinQ VLAN [ NOT AN OFFICIALLY REGISTERED ID ] */
+#define ETH_P_QINQ3	0x9300	/* deprecated QinQ VLAN [ NOT AN OFFICIALLY REGISTERED ID ] */
+
+struct nm_ethhdr {
+	unsigned char h_dest[ETH_ALEN];		/* destination eth addr */
+	unsigned char h_source[ETH_ALEN];	/* source ether addr    */
+	uint16_t h_proto;			/* packet type ID field */
+} __attribute__((packed));
+
+struct vlan_ethhdr {
+	unsigned char h_dest[ETH_ALEN];
+	unsigned char h_source[ETH_ALEN];
+	uint16_t h_vlan_proto;
+	uint16_t h_vlan_TCI;
+	uint16_t h_vlan_encapsulated_proto;
+} __attribute__((packed));
+
+
 /*
  * nm_bridge is a descriptor for a VALE switch.
  * Interfaces for a bridge are all in bdg_ports[].
@@ -282,6 +308,298 @@
         }
 }
 
+static void
+build_sym_key_cache(uint32_t *cache, int cache_len)
+{
+	static const uint8_t key[] = {
+		0x50, 0x6d, 0x50, 0x6d,
+                0x50, 0x6d, 0x50, 0x6d,
+                0x50, 0x6d, 0x50, 0x6d,
+                0x50, 0x6d, 0x50, 0x6d,
+                0xcb, 0x2b, 0x5a, 0x5a,
+		0xb4, 0x30, 0x7b, 0xae,
+                0xa3, 0x2d, 0xcb, 0x77,
+                0x0c, 0xf2, 0x30, 0x80,
+                0x3b, 0xb7, 0x42, 0x6a,
+                0xfa, 0x01, 0xac, 0xbe};
+	
+        uint32_t result = (((uint32_t)key[0]) << 24) |
+                (((uint32_t)key[1]) << 16) |
+                (((uint32_t)key[2]) << 8)  |
+                ((uint32_t)key[3]);
+	
+        uint32_t idx = 32;
+        int i;
+	
+        for (i = 0; i < cache_len; i++, idx++) {
+                uint8_t shift = (idx % (sizeof(uint8_t) * 8));
+                uint32_t bit;
+		
+                cache[i] = result;
+                bit = ((key[idx/(sizeof(uint8_t) * 8)] << shift) 
+		       & 0x80) ? 1 : 0;
+                result = ((result << 1) | bit);
+        }
+}
+/*---------------------------------------------------------------------*/
+/**
+ ** Computes symmetric hash based on the 4-tuple header data
+ **/
+static uint32_t
+sym_hash_fn(uint32_t sip, uint32_t dip, uint16_t sp, uint32_t dp)
+{
+#define MSB32				0x80000000
+#define MSB16				0x8000
+#define KEY_CACHE_LEN			96
+
+	uint32_t rc = 0;
+	int i;
+	static int first_time = 1;
+	static uint32_t key_cache[KEY_CACHE_LEN] = {0};
+	
+	if (first_time) {
+		build_sym_key_cache(key_cache, KEY_CACHE_LEN);
+		first_time = 0;
+	}
+	
+	for (i = 0; i < 32; i++) {
+                if (sip & MSB32)
+                        rc ^= key_cache[i];
+                sip <<= 1;
+        }
+        for (i = 0; i < 32; i++) {
+                if (dip & MSB32)
+			rc ^= key_cache[32+i];
+                dip <<= 1;
+        }
+        for (i = 0; i < 16; i++) {
+		if (sp & MSB16)
+                        rc ^= key_cache[64+i];
+                sp <<= 1;
+        }
+        for (i = 0; i < 16; i++) {
+                if (dp & MSB16)
+                        rc ^= key_cache[80+i];
+                dp <<= 1;
+        }
+
+	return rc;
+}
+/*---------------------------------------------------------------------*/
+/**
+ ** Parser + hash function for the IPv4 packet
+ **/
+static uint32_t
+decode_ip_n_hash(struct nm_iphdr *iph, uint8_t hash_split, uint8_t seed)
+{
+	uint32_t rc = 0;
+	
+	if (hash_split == 2) {
+		rc = sym_hash_fn(ntohl(iph->saddr),
+			ntohl(iph->daddr),
+			ntohs(0xFFFD) + seed,
+			ntohs(0xFFFE) + seed);
+	} else {
+		struct nm_tcphdr *tcph = NULL;
+		struct nm_udphdr *udph = NULL;
+		uint8_t ihl = (iph->version_ihl & 0x0F) > 4 ? (iph->version_ihl & 0x0F) : (iph->version_ihl & 0xF0);
+		switch (iph->protocol) {
+		case IPPROTO_TCP:
+			tcph = (struct nm_tcphdr *)((uint8_t *)iph + (ihl<<2));
+			rc = sym_hash_fn(ntohl(iph->saddr), 
+					 ntohl(iph->daddr), 
+					 ntohs(tcph->source) + seed,
+					 ntohs(tcph->dest) + seed);
+			break;
+		case IPPROTO_UDP:
+			udph = (struct nm_udphdr *)((uint8_t *)iph + (ihl<<2));
+			rc = sym_hash_fn(ntohl(iph->saddr),
+					 ntohl(iph->daddr),
+					 ntohs(udph->source) + seed,
+					 ntohs(udph->dest) + seed);
+			break;
+		case IPPROTO_IPIP:
+			/* tunneling */
+			rc = decode_ip_n_hash((struct nm_iphdr *)((uint8_t *)iph + (ihl<<2)),
+					      hash_split, seed);
+			break;
+		default:
+			/* 
+			 ** the hash strength (although weaker but) should still hold 
+			 ** even with 2 fields 
+			rc = sym_hash_fn(ntohl(iph->ip_src.s_addr),
+					 ntohl(iph->ip_dst.s_addr),
+					 ntohs(0xFFFD) + seed,
+					 ntohs(0xFFFE) + seed);
+			 **/
+			// We return 0 to indicate that the packet couldn't be balanced.
+			return 0;
+			break;
+		}
+	}
+	return rc;
+}
+/*---------------------------------------------------------------------*/
+/**
+ ** Parser + hash function for the IPv6 packet
+ **/
+static uint32_t
+decode_ipv6_n_hash(struct nm_ipv6hdr *ipv6h, uint8_t hash_split, uint8_t seed)
+{
+	uint32_t saddr, daddr;
+	uint32_t rc = 0;
+	
+	/* Get only the first 4 octets */
+	saddr = ipv6h->saddr[0] |
+		(ipv6h->saddr[1] << 8) |
+		(ipv6h->saddr[2] << 16) |
+		(ipv6h->saddr[3] << 24);
+	daddr = ipv6h->daddr[0] |
+		(ipv6h->daddr[1] << 8) |
+		(ipv6h->daddr[2] << 16) |
+		(ipv6h->daddr[3] << 24);
+	
+	if (hash_split == 2) {
+		rc = sym_hash_fn(ntohl(saddr),
+				 ntohl(daddr),
+				 ntohs(0xFFFD) + seed,
+				 ntohs(0xFFFE) + seed);
+	} else {
+		struct nm_tcphdr *tcph = NULL;
+		struct nm_udphdr *udph = NULL;
+		
+		switch(ntohs(ipv6h->nexthdr)) {
+		case IPPROTO_TCP:
+			tcph = (struct nm_tcphdr *)(ipv6h + 1);
+			rc = sym_hash_fn(ntohl(saddr), 
+					 ntohl(daddr), 
+					 ntohs(tcph->source) + seed,
+					 ntohs(tcph->dest) + seed);
+			break;
+		case IPPROTO_UDP:
+			udph = (struct nm_udphdr *)(ipv6h + 1);
+			rc = sym_hash_fn(ntohl(saddr),
+					 ntohl(daddr),
+					 ntohs(udph->source) + seed,
+					 ntohs(udph->dest) + seed);
+			break;
+		case IPPROTO_IPIP:
+			/* tunneling */
+			rc = decode_ip_n_hash((struct nm_iphdr *)(ipv6h + 1),
+					      hash_split, seed);
+			break;
+		case IPPROTO_IPV6:
+			/* tunneling */
+			rc = decode_ipv6_n_hash((struct nm_ipv6hdr *)(ipv6h + 1),
+						hash_split, seed);
+			break;
+		case IPPROTO_ICMP:
+		case IPPROTO_GRE:
+		case IPPROTO_ESP:
+		case IPPROTO_PIM:
+		case IPPROTO_IGMP:
+		default:
+			/* 
+			 ** the hash strength (although weaker but) should still hold 
+			 ** even with 2 fields 
+			 **/
+			rc = sym_hash_fn(ntohl(saddr),
+					 ntohl(daddr),
+					 ntohs(0xFFFD) + seed,
+					 ntohs(0xFFFE) + seed);
+		}
+	}
+	return rc;
+}
+/*---------------------------------------------------------------------*/
+/**
+ *  *  A temp solution while hash for other protocols are filled...
+ *   * (See decode_vlan_n_hash & pkt_hdr_hash functions).
+ *    */
+static uint32_t
+decode_others_n_hash(struct nm_ethhdr *ethh, uint8_t seed)
+{
+	uint32_t saddr, daddr, rc;
+	
+	saddr = ethh->h_source[5] |
+		(ethh->h_source[4] << 8) |
+		(ethh->h_source[3] << 16) |
+		(ethh->h_source[2] << 24);
+	daddr = ethh->h_dest[5] |
+		(ethh->h_dest[4] << 8) |
+		(ethh->h_dest[3] << 16) |
+		(ethh->h_dest[2] << 24);
+
+	rc = sym_hash_fn(ntohl(saddr),
+			 ntohl(daddr),
+			 ntohs(0xFFFD) + seed,
+			 ntohs(0xFFFE) + seed);
+
+	return rc;
+}
+/*---------------------------------------------------------------------*/
+/**
+ ** Parser + hash function for VLAN packet
+ **/
+static inline uint32_t
+decode_vlan_n_hash(struct nm_ethhdr *ethh, uint8_t hash_split, uint8_t seed)
+{
+	uint32_t rc = 0;
+	struct vlan_ethhdr *vhdr = (struct vlan_ethhdr *)(ethh + 1);
+	
+	switch (ntohs(vhdr->h_vlan_proto)) {
+	case ETH_P_IP:
+		rc = decode_ip_n_hash((struct nm_iphdr *)(vhdr + 1),
+				      hash_split, seed);
+		break;
+	case ETH_P_IPV6:
+		rc = decode_ipv6_n_hash((struct nm_ipv6hdr *)(vhdr + 1),
+					hash_split, seed);
+		break;
+	case ETH_P_ARP:
+	default:
+		/* others */
+		rc = decode_others_n_hash(ethh, seed);
+		break;
+	}
+	return rc;
+}
+/*---------------------------------------------------------------------*/
+/**
+ ** General parser + hash function...
+ **/
+uint32_t
+pkt_hdr_hash(const unsigned char *buffer, uint8_t hash_split, uint8_t seed)
+{
+	int rc = 0;
+	struct nm_ethhdr *ethh = (struct nm_ethhdr *)buffer;
+	
+	switch (ntohs(ethh->h_proto)) {
+	case ETH_P_IP:
+		rc = decode_ip_n_hash((struct nm_iphdr *)(ethh + 1),
+				      hash_split, seed);
+		break;
+	case ETH_P_IPV6:
+		rc = decode_ipv6_n_hash((struct nm_ipv6hdr *)(ethh + 1),
+					hash_split, seed);
+		break;
+	case ETH_P_8021Q:
+	case ETH_P_8021AD:
+	case ETH_P_QINQ1:
+	case ETH_P_QINQ2:
+	case ETH_P_QINQ3:
+		rc = decode_vlan_n_hash(ethh, hash_split, seed);
+		break;
+	case ETH_P_ARP:
+	default:
+		/* others */
+		rc = decode_others_n_hash(ethh, seed);
+		break;
+	}
+
+	return rc;
+}
+
 
 static int
 nm_is_id_char(const char c)
@@ -1771,6 +2089,8 @@
 	/* first pass: find a destination for each packet in the batch */
 	for (i = 0; likely(i < n); i += ft[i].ft_frags) {
 		uint8_t dst_ring = ring_nr; /* default, same ring as origin */
+		uint8_t *buf = ft[i].ft_buf;
+		uint32_t hashpkt;
 		uint16_t dst_port, d_i;
 		struct nm_bdg_q *d;
 
@@ -1791,6 +2111,10 @@
 		else if (unlikely(dst_port == me ||
 		    !b->bdg_ports[dst_port]))
 			continue;
+		else {
+			hashpkt = pkt_hdr_hash((const unsigned char *)(buf+na->up.virt_hdr_len), 4, SEED_CHAR);
+			dst_ring = hashpkt % b->bdg_ports[dst_port]->up.num_rx_rings;
+		}
 
 		/* get a position in the scratch pad */
 		d_i = dst_port * NM_BDG_MAXRINGS + dst_ring;
